#!/usr/bin/env bash

# Source project configuration file
config_file=$(pwd)/src/config/example-project-F2.config
source $config_file


## Parameters
# Files and input parameters
script_name=05a_genotype_reads.bash
genome_name="B6"
alt_genome_name="CAST"
genome=$B6_GENOME
intervals=$B6_INTERVALS
size_subsets=1
vcf_file=${SNPCALL}/1_domesticus/Joint_variant_calling.hq_recalibrated_variants.vcf
freq_vcf_file=${vcf_file/.vcf/.freq_vcf.txt}

# Folders
output_folder=${B6_GENOT}
subsets_folder=${RECOMBINANTS}/00_List_of_subsets
tmp_folder=$RECOMBINANTS/tmp
if [ ! -d $subsets_folder ] ; then mkdir $subsets_folder ; fi
for sample in ${LIST_SAMPLES[@]} ; do
	if [ ! -d $tmp_folder/$sample/ ] ; then mkdir -p $tmp_folder/$sample/ ; fi
	if [ ! -d $output_folder/$sample/ ] ; then mkdir -p $output_folder/$sample/ ; fi
	if [ ! -d $PROJ_SUB/${script_name/.bash}.${genome_name}.${sample} ] ; then mkdir -p $PROJ_SUB/${script_name/.bash}.${genome_name}.${sample} ; fi
	if [ ! -d $PROJ_LOG/${script_name/.bash}.${genome_name}.${sample} ] ; then mkdir -p $PROJ_LOG/${script_name/.bash}.${genome_name}.${sample} ; fi
done


## Prepare subset bedfiles
split -l $size_subsets \
	--additional-suffix ".bed" \
	-d $intervals \
	${subsets_folder}/Subset_


## Prepare freq vcf file
bash $PROJ_SRC/utils/prepare_freq_vcf_file.bash -i $vcf_file -o $freq_vcf_file


## Run on all samples
for sample in ${LIST_SAMPLES[@]} ; do
	echo $sample

	input_bam_file=$SNPCALL/1_domesticus/${sample}.sorted.markedDup.only_mapped_fragments.only_primary.onIntervals.recal_reads.bam
	
	# Loop on all subsets
	for subset in $subsets_folder/* ; do

		# Name of prefixes
		subset_name="${subset##*/}"
		subset_prefix=${subset_name/.bed/}
		output_prefix=$output_folder/${sample}/${sample}.${subset_prefix}
		tmp_prefix=$tmp_folder/${sample}/${sample}.${subset_prefix}

		# Write submission file
		SUB_file=$PROJ_SUB/${script_name/.bash}.${genome_name}.${sample}/${subset_prefix}.sub
		LOG_file=$PROJ_LOG/${script_name/.bash}.${genome_name}.${sample}/${subset_prefix}

		echo "#!/bin/bash" > $SUB_file
		echo "#SBATCH --job-name=${sample}.${subset_prefix}" >> $SUB_file
		echo "#SBATCH --partition=normal" >> $SUB_file
		echo "#SBATCH --time=20:00:00" >> $SUB_file
		echo "#SBATCH --cpus-per-task=1" >> $SUB_file
		echo "#SBATCH --mem=10G" >> $SUB_file
		echo "#SBATCH --output=${LOG_file}.out" >> $SUB_file
		echo "#SBATCH --error=${LOG_file}.err" >> $SUB_file

		echo bash $PROJ_SRC_CORE/$script_name -c $config_file -o $output_prefix -t $tmp_prefix -i $input_bam_file -f $freq_vcf_file -b $subset -g $genome -r $genome_name -a $alt_genome_name --sub $SUB_file >> $SUB_file

		# Submit job
		sbatch $SUB_file
		# NB: On LBBE/PRABI cluster, exclude node pbil-deb29:
		# sbatch --exclude=pbil-deb29 $SUB_file

	done

done


## (Optional) Verification: All the files that are outputted need to be redone
for sample in ${LIST_SAMPLES[@]} ; do
	for LOG_ERR_file in $PROJ_LOG/${script_name/.bash}.${genome_name}.${sample}/*err ; do
		var=`head -n1 $LOG_ERR_file | grep -v "^\[INFO\]\[Sam2Tsv\]. Completed"` 
		if [ ! -z $var ] ; then 
			var2=`grep -v "^\[INFO\]\[Sam2Tsv\]" $LOG_ERR_file` 
			if [ ! -z $var2  ] ; then 
				echo $LOG_ERR_file 
			fi 
		fi 
	done 
done
# if one log-err file does not have sam2tsv completed on the first line (i.e. 
# there is no read and this will output other errors below which we do not 
# want to take into account), check that all lines start by [INFO][Sam2Tsv]. 
# If not, the log-err file is written done and should be run again.


